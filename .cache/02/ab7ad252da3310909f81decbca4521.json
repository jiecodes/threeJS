{"id":"shaders/ew/vertexShader.glsl","dependencies":[{"name":"C:\\Users\\Lenovo\\Desktop\\three\\02 项目\\three_one\\package.json","includedInParent":true,"mtime":1672130148988}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float rotation;\\nuniform vec2 center;\\nvarying vec2 vUv;\\nvoid main(){\\n    // gl_Position=projectionMatrix*viewMatrix*modelMatrix*vec4(position,1);\\n    // gl_Position=projectionMatrix*viewMatrix*modelMatrix*vec4(position,1);\\n    // vUv=uv;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\tscale *= - mvPosition.z;\\n\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\n\\tmvPosition.xy += rotatedPosition;\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":983},"source":"shaders/ew/vertexShader.glsl","original":{"line":1,"column":981}}],"sources":{"shaders/ew/vertexShader.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float rotation;\\nuniform vec2 center;\\nvarying vec2 vUv;\\nvoid main(){\\n    // gl_Position=projectionMatrix*viewMatrix*modelMatrix*vec4(position,1);\\n    // gl_Position=projectionMatrix*viewMatrix*modelMatrix*vec4(position,1);\\n    // vUv=uv;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\tscale *= - mvPosition.z;\\n\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\n\\tmvPosition.xy += rotatedPosition;\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n}\";"},"lineCount":null}},"error":null,"hash":"8da1af581b4241560e19fed02fb8ac65","cacheData":{"env":{}}}